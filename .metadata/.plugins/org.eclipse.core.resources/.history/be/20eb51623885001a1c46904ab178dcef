/*
 * app.c
 *
 *  Created on: Apr 15, 2020
 *      Author: ludivineo
 */

#include<stdio.h>
#include<pthread.h>
#include<stdbool.h>

#include "fifo.h"
#include"app.h"
#include "__debug.h"

static int8_t g_token_top_selector = 1;
static int8_t active_player = NO_PLAYER;
static int8_t g_matrix[COL_COUNT][LINE_COUNT];
static bool game = false;

Color Black = { 0, 0, 0 }, Blue = { 0, 0, 255 }, Red = { 255, 0, 0 }, White = {
		255, 255, 255 }, Purple = { 255, 0, 255 }, Yellow = { 255, 255, 0 },
		Green = { 0, 255, 0 };

void top_line_display(void) {
	printf("TOP =   ");
	for (int i_top = 1; i_top <= COL_COUNT; i_top++) {
		if (i_top != g_token_top_selector) {
			printf(" 0 ");
		} else {
			printf(" %d ", active_player);
		}
	}
	printf("\n\n");
}
void matrix_lines_display(void) {
	for (int line = 0; line < LINE_COUNT; line++) {
		printf("Line %d  ", (line + 1));
		for (int col = 0; col < COL_COUNT; col++) {
			printf(" %d ", g_matrix[col][line]);
		}
		printf("\n");
	}
}

void gp4_show_board(void) {
	debug_printf(1, "Affichage de la matrice complete\n");
	top_line_display();
	matrix_lines_display();
	printf("\n");
}

bool is_col_empty(int col) {
	if (col < 1) {
		return false;
	}
	if (col > COL_COUNT) {
		return false;
	}
	if (g_matrix[col - 1][0] == 0) {
		return true;
	}
	return false;
}

data_msg gp4_init(void) {
	int row, col;
	data_msg instructions_to_send;
	active_player = PLAYER_1;
	g_token_top_selector = START_POSITION;
	for (row = 0; row < 7; row++) {
		for (col = 0; col < 7; col++) {
			g_matrix[row][col] = NO_PLAYER;
		}
	}
	instructions_to_send.params.move_token.positions.end_position.c = START_POSITION;
	instructions_to_send.params.move_token.positions.end_position.l = 0;
	instructions_to_send.params.move_token.color = color_P1;
	return instructions_to_send;
}

pos_token_t gp4_move_right_test(void) {
	int direction = +1;
	int destination;
	pos_token_t return_moved_token;
	return_moved_token.beg_position.c = g_token_top_selector - 1;
	return_moved_token.beg_position.l = 0;
	return_moved_token.end_position.l = 0;
	destination = g_token_top_selector + direction;
	while (1) {
		if (destination > COL_COUNT) {
			destination = 1;
		}
		if (is_col_empty(destination) == true) {
			g_token_top_selector = destination;
			return_moved_token.end_position.c = g_token_top_selector - 1;
			return_moved_token.is_ok = true;
			return return_moved_token;
		}
		destination++;
	}
}

pos_token_t gp4_move_left_test(void) {
	int direction = -1;
	int destination;
	pos_token_t return_moved_token;
	return_moved_token.beg_position.c = g_token_top_selector - 1;
	return_moved_token.beg_position.l = 0;
	return_moved_token.end_position.l = 0;
	destination = g_token_top_selector + direction;
	while (1) {
		if (destination < 1) {
			destination = 7;
		}
		if (is_col_empty(destination) == true) {
			g_token_top_selector = destination;
			return_moved_token.end_position.c = destination - 1;
			return_moved_token.is_ok = true;
			return return_moved_token;
		}
		destination--;
	}
}

pos_token_t gp4_play_token(void) {
	int column = g_token_top_selector - 1;
	int line = 5;	//ou LINE_COUNT-1
	while (g_matrix[column][line] != 0) {
		line--;
	}
	g_matrix[(column)][line] = active_player;
	pos_token_t return_played_token;
	return_played_token.is_ok = true;
	return_played_token.beg_position.c = column;
	return_played_token.beg_position.l = 0;
	return_played_token.end_position.c = column;
	return_played_token.end_position.l = line + 1;
	return return_played_token;
}

winner_t gp4_check_win_vertical(void) {
	winner_t game_status = { .status = live };
	for (int line = 0; line < 7; line++) {
		for (int col = 0; col < 4; col++) {
			if ((g_matrix[line][col] == g_matrix[line][col + 1])
					&& (g_matrix[line][col] == g_matrix[line][col + 2])
					&& (g_matrix[line][col] == g_matrix[line][col + 3])
					&& (g_matrix[line][col] != 0)) {
				game_status.status = stop_winner;
				game_status.win_type = vert;
				if (g_matrix[line][col] == 1) {
					game_status.win_player = PLAYER_1;
					return game_status;
				} else {
					game_status.win_player = PLAYER_2;
					return game_status;
				}
			}

		}
	}
	return game_status;
}

winner_t gp4_check_win_horizontal(void) {
	winner_t game_status = { .status = live };
	for (int col = 0; col < 7; col++) {
		for (int line = 0; line < 3; line++) {
			if (g_matrix[line][col] == g_matrix[line + 1][col]) {
				if (g_matrix[line][col] == g_matrix[line + 2][col]) {
					if (g_matrix[line][col] == g_matrix[line + 3][col]) {
						if (g_matrix[line][col] != 0) {
							game_status.status = stop_winner;
							game_status.win_type = horiz;
							if (g_matrix[line][col] == 1) {
								game_status.win_player = PLAYER_1;
								return game_status;
							} else {
								game_status.win_player = PLAYER_2;
								return game_status;
							}
						}
					}
				}
			}
		}
	}
	return game_status;
}

winner_t gp4_check_win_rightdiag(void) {
	winner_t game_status;
	game_status.status = live;
	int col, line;
	for (line = 0; line < 3; line++) {
		for (col = 0; col < 4; col++) {
			if (g_matrix[line][col] == g_matrix[line + 1][col + 1]) {
				if (g_matrix[line][col] == g_matrix[line + 2][col + 2]) {
					if (g_matrix[line][col] == g_matrix[line + 3][col + 3]) {
						if (g_matrix[line][col] != 0) {
							game_status.status = stop_winner;
							game_status.win_type = right_diag;
							if (g_matrix[line][col] == 1) {
								game_status.win_player = PLAYER_1;
								return game_status;
							} else {
								game_status.win_player = PLAYER_2;
								return game_status;
							}
						}
					}
				}
			}
		}
	}
	return game_status;
}

winner_t gp4_check_win_leftdiag(void) {
	winner_t game_status;
	game_status.status = live;
	int col, line;
	for (col = 3; col < 7; col++) {
		for (line = 0; line < 3; line++) {
			if (g_matrix[line][col] == g_matrix[line - 1][col - 1]) {
				if (g_matrix[line][col] == g_matrix[line - 2][col - 2]) {
					if (g_matrix[line][col] == g_matrix[line - 3][col - 3]) {
						if (g_matrix[line][col] != 0) {
							game_status.status = stop_winner;
							game_status.win_type = left_diag;
							if (g_matrix[line][col] == 1) {
								game_status.win_player = PLAYER_1;
								return game_status;
							} else {
								game_status.win_player = PLAYER_2;
								return game_status;
							}

						}
					}
				}
			}
		}
	}
	return game_status;
}

winner_t gp4_check_equal(void) {
	winner_t game_status = { .status = live };
	int compteur = 0;
	for (int col = 0; col < 7; col++) {
		if (!is_col_empty(col)) {
			compteur++;
		}
	}
	if (compteur == 6) {
		game_status.status = stop_equal;
	}
	return game_status;
}

static winner_t gp4_check_status(void) {
	winner_t game_status;
	game_status = gp4_check_equal();
	if (game_status.status == live) {
		game_status = gp4_check_win_horizontal();
	}
	if (game_status.status == live) {
		game_status = gp4_check_win_vertical();
	}
	if (game_status.status == live) {
		game_status = gp4_check_win_rightdiag();
	}
	if (game_status.status == live) {
		game_status = gp4_check_win_leftdiag();
	}
	return game_status;
}

//static void gp4_next_player(void) {
//	debug_printf(1, "changement de joueur\n");
//	if (active_player == 1) {
//		active_player = 2;
//	} else {
//		active_player = 1;
//	}
//	//TODO :placer le token sur une colonne dispo
//	g_token_top_selector = START_POSITION;
//}

pos_token_t gp4_next_playerV2(void) {
	pos_token_t pos_token_top;

	if (active_player == PLAYER_1) {
		active_player = PLAYER_2;
	}
	else {
		active_player = PLAYER_1;
	}
	g_token_top_selector = START_POSITION;

	while (!is_col_empty(g_token_top_selector)) {
		pos_token_top = gp4_move_right_test();
	}
	return pos_token_top;
}


data_msg write_msg_to_send(pos_token_t played_token, data_msg instructions_to_send) {
	instructions_to_send.params.move_token.positions.beg_position.c = played_token.beg_position.c;
	instructions_to_send->params.move_token.positions.beg_position.l = played_token.beg_position.l;
	instructions_to_send->params.move_token.positions.end_position.c = played_token.end_position.c;
	instructions_to_send->params.move_token.positions.end_position.l = played_token.end_position.l;
	return instructions_to_send;
}

void * applicationV2(void*arg) {
	debug_pr_fn(1, "app()entrée dans thread app\n");
	int receive_status = 0;
	pos_token_t played_token = {0};
	winner_t game_status = {0};
	while (1) {

		data_msg received_instructions = INIT_DATA_MSG ;
		debug_pr_fn(1, "app()entrée dans while thread app\n");
		receive_status = ReceiveMessage(LIST_READ, &received_instructions,sizeof(data_msg));
		debug_pr_fn(1, "app()receive msg status : %d\n", receive_status);
		if (receive_status == 1) {
			//-------------------------------------------------si saisie clavier (fleche simu)------------------------------//
			if (received_instructions.type == MSG_PLAYER) { //type de commande : saisie clavier
				data_msg instructions_to_send = INIT_DATA_MSG;

				//------------------------------------------si pas de partie en cours-------------------------//
				if (active_player == NO_PLAYER && game == false ) {
					game = true;
					instructions_to_send = gp4_init();
					//write_msg_to_send(played_token, &instructions_to_send);
					SendMessage(LIST_DISPLAY, &instructions_to_send,sizeof(data_msg));
				}
				//---------------------------------------------si partie en cours------------------------------//
				else if (received_instructions.params.player.player == active_player && game == true){

					if (received_instructions.params.player.direction == LEFT) {
						played_token = gp4_move_left_test();
					}
					if (received_instructions.params.player.direction== RIGHT) {
						played_token = gp4_move_right_test();
					}
					if (received_instructions.params.player.direction== DOWN) {
						played_token = gp4_play_token();
						write_msg_to_send(played_token, &instructions_to_send);
						SendMessage(LIST_DISPLAY, &instructions_to_send,sizeof(data_msg));
						game_status = gp4_check_status();
						if (game_status.status == live){
							played_token = gp4_next_playerV2();
						}
					}
					write_msg_to_send(played_token, &instructions_to_send);
					SendMessage(LIST_DISPLAY, &instructions_to_send,sizeof(data_msg));
				}
			}
		}
	}
}






//
//
//
//void * application(void*arg) {
//	debug_pr_fn(1, "app()entrée dans thread app\n");
//	int receive_status = 0;
//	pos_token_t played_token;
//	winner_t game_status;
//	bool game = false;
//	while (1) {
//		data_msg received_instructions = INIT_DATA_MSG ;
//		debug_pr_fn(1, "app()entrée dans while thread app\n");
//		receive_status = ReceiveMessage(LIST_READ, &received_instructions,sizeof(data_msg));
//		debug_pr_fn(1, "app()receive msg status : %d\n", receive_status);
//		if (receive_status == 1) {
//			if (active_player == NO_PLAYER) {
//				gp4_init();
//				SendMessage(LIST_DISPLAY, &instructions_to_send,sizeof(data_msg));
//			} else
//				if (received_instructions.type == MSG_PLAYER) { //type de commande : saisie clavier
//					data_msg instructions_to_send = INIT_DATA_MSG;
//					game_status = gp4_check_status();
//					// si le jeu n'est NI NULL, NI GAGNE
//					if (game_status.status == live) {
//						if (received_instructions.params.player.player
//								== PLAYER_1) { //definir le joueur 1
//							active_player = PLAYER_1;
//							instructions_to_send.params.move_token.color = 	color_P1;
//						}
//						if (received_instructions.params.player.player== PLAYER_2) { //definir le joueur 2
//							active_player = PLAYER_2;
//							instructions_to_send.params.move_token.color = color_P2;
//						}
//						if (received_instructions.params.player.direction== LEFT) { //direction gauche
//							played_token = gp4_move_left_test();
//						}
//						if (received_instructions.params.player.direction== RIGHT) { //direction droite
//							played_token = gp4_move_right_test();
//						}
//						if (received_instructions.params.player.direction== DOWN) { //direction droite
//							played_token = gp4_play_token();
//						}
//						//FIN : Instruction à envoyer
//						gp4_show_board();
//						write_msg_to_send(played_token, &instructions_to_send);
//						SendMessage(LIST_DISPLAY, &instructions_to_send,
//								sizeof(data_msg));
//						debug_pr_fn(1, "app()send queue = ok\n");
//					}
//				}
//		}
//	}
//	pthread_exit(NULL);
//}
//}
//
///*
// *
// * void *thread_app(void *arg) {
// //	struct Element nb_value;
// //	nb_value.data.value[1]=0;
// active_player = 0;
// struct Element receive_value;
// struct Element send_value;
// pos_token_played_t played_token;
// while (1) {
// if (receive_message(QUEUE_READ, &receive_value, SIZEOFMESSAGE)) {
// //			printf("app %d %d \n", receive_value.data.value[0],
// //					receive_value.data.value[1]);
// if(receive_value.msg==msg_player){
// if (receive_value.data.player.player == active_player) {
// if (receive_value.data.player.direction == DOWN) {
// played_token = gp4_play_token();
// compute_message(&send_value, &played_token);
// send_message(QUEUE_SEND, &send_value, SIZEOFMESSAGE);
// played_token=gp4_next_player();
// if (active_player == PLAYER_1) {
// send_value.data.token.color = PLAYER_COLOR_1;
// }
// else if (active_player == PLAYER_2) {
// send_value.data.token.color = PLAYER_COLOR_2;
// }
// }
// if (receive_value.data.player.direction== RIGHT) {
// played_token = gp4_move_right();
// }
// if (receive_value.data.player.direction == LEFT) {
// played_token = gp4_move_left();
// }
// }
// if (active_player == 0) {
// gp4_init();
// gp4_display();
// active_player = PLAYER_1;
// played_token.beg_position.c = 0;
// played_token.beg_position.l = 0;
// played_token.end_position.l = 0;
// played_token.end_position.c = 3;
// send_value.data.token.color = PLAYER_COLOR_1;
// }
// gp4_display();
// compute_message(&send_value, &played_token);
// send_message(QUEUE_SEND, &send_value, SIZEOFMESSAGE);
// }
//
// }
// }
// }
// */
