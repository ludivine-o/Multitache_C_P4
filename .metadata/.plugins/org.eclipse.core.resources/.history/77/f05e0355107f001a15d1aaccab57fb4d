/*
*****************************************************************************

  File        : main.cpp

  The MIT License (MIT)
  Copyright (c) 2019 STMicroelectronics

******************************************************************************/
#include<stdio.h>
#include<pthread.h>
#include<unistd.h>
#include"0_fifo.h"


#define MSGSIZE 10



struct List liste_display;
struct List liste_read;


void SendMessage(List_Id liste, struct Element * message, int message_length){
	if (message_length<=MSGSIZE){
		if (liste == LIST_READ){
			push_element(&liste_read, message);
			sem_post(&liste_read.semaphore_list);
		}
		else if(liste == LIST_DISPLAY){
			push_element(&liste_display, message);
			sem_post(&liste_display.semaphore_list);
		}
	}
}

int ReceiveMessage(List_Id liste, struct Element * message, int message_length){
	int pop_status = 0;
	if (MSGSIZE<=message_length){
		if (liste == LIST_READ){
			sem_wait(&liste_read.semaphore_list);
			pop_status = pop_element(&liste_read, message);
		}
		else if(liste == LIST_DISPLAY){
			sem_wait(&liste_display.semaphore_list);
			pop_status = pop_element(&liste_display, message);
		}
	}
	return pop_status;
}

int main(void){

	init_list(&liste_read);//declaration et init de la liste de lecture
	init_list(&liste_display);	//declaration et init de la liste d'envoi


//	pthread_t thread1;
//	pthread_t thread2;
//	pthread_t thread3;
//
//	pthread_create(&thread1, NULL, read_button, NULL);
//	pthread_create(&thread2, NULL, application, NULL);
//	pthread_create(&thread3, NULL, display, NULL);
//	pthread_join (thread1, NULL);
//	pthread_join (thread2, NULL);
//	pthread_join (thread3, NULL);
//
	return 0;
}

/*
#include "leds_control.h"
#include "fifo.h"
#include "threads.h"

struct List liste_display;
struct List liste_read;

int main(void){

	//declaration et init de la liste de lecture
	init_list(&liste_read);
	printf("init list() : initialisation de la file d'attente de lecture \n");

	//declaration et init de la liste d'envoi
	init_list(&liste_display);
	printf("init list() : initialisation de la file d'attente d'Ã©criture \n");

	//init des deux matrix
	init_matrix();
	printf("init list() : initialisation des matrices \n");

	pthread_t thread1;
	pthread_t thread2;
	pthread_t thread3;

	openLink();
	pthread_create(&thread1, NULL, read_button, NULL);
	pthread_create(&thread2, NULL, application, NULL);
	pthread_create(&thread3, NULL, display, NULL);
	pthread_join (thread1, NULL);
	pthread_join (thread2, NULL);
	closeLink();
	return 0;

}
*/
